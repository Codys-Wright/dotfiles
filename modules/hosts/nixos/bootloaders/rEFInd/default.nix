# rEFInd Bootloader Implementation
# Supports themes, hierarchical menus, and chainloading
{
  lib,
  config,
  pkgs,
  ...
}:

let
  cfg = config.bootloaderConfig;
  helpers = cfg.helpers;

  # Generate rEFInd menu entries
  generateRefindEntry =
    entry:
    let
      entryConfig = {
        os = ''
          menuentry "${entry.name}" {
            ${
              if entry.osType == "windows" then
                ''
                  loader /EFI/Microsoft/Boot/bootmgfw.efi
                  icon /EFI/refind/icons/os_win.png
                ''
              else if entry.osType == "nixos" then
                ''
                  loader /EFI/nixos/kernel
                  initrd /EFI/nixos/initrd
                  icon /EFI/refind/icons/os_nixos.png
                  options "init=/nix/store/\*-nixos-system-*/init"
                ''
              else if entry.osType == "linux" then
                ''
                  loader /EFI/Linux/vmlinuz
                  initrd /EFI/Linux/initrd.img
                  icon /EFI/refind/icons/os_linux.png
                ''
              else
                ''
                  # Custom OS entry
                  loader ${entry.device}/bootloader.efi
                  icon /EFI/refind/icons/os_unknown.png
                ''
            }
          }
        '';

        submenu = ''
          # Submenu entry for ${entry.name}
          # rEFInd doesn't support nested menus natively, so we use manual entries
          menuentry "${entry.name} >" {
            ${
              if entry.submenu.bootloader == "rEFInd" then
                ''
                  # Load secondary rEFInd configuration
                  loader /EFI/refind/refind_${entry.submenu.theme or "default"}.efi
                ''
              else if entry.submenu.bootloader == "grub" then
                ''
                  # Chainload to GRUB
                  loader /EFI/grub/grubx64.efi
                  icon /EFI/refind/icons/os_grub.png
                ''
              else
                ''
                  # Chainload to systemd-boot
                  loader /EFI/systemd/systemd-bootx64.efi
                  icon /EFI/refind/icons/os_systemd.png
                ''
            }
          }
        '';

        generations = ''
          # NixOS Generations submenu
          submenu_title "NixOS Generations"
          include /EFI/refind/nixos-generations.conf
        '';

        firmware = ''
          # Firmware settings entry
          menuentry "UEFI Firmware Settings" {
            firmware
            icon /EFI/refind/icons/tool_fwupdate.png
          }
        '';
      };
    in
    entryConfig.${entry.type} or "";

  # Generate rEFInd configuration file
  refindConfig = ''
    # rEFInd Configuration
    # Generated by Universal Bootloader System

    # Timeout configuration
    timeout ${toString cfg.primary.timeout}
    hideui singleuser,hints,arrows,badges
    showtools shell,gdisk,memtest,firmware

    # Theme configuration
    ${lib.optionalString (cfg.primary.theme != null) ''
      include themes/${cfg.primary.theme}/theme.conf
    ''}

    # Screen resolution and display
    resolution 1920 1080
    use_graphics_for windows,linux

    # Boot options
    default_selection ${cfg.primary.customName}
    enable_and_lock_vmx false

    # Scan options for OS detection
    scanfor internal,external,biosexternal,manual
    also_scan_dirs +,@/boot/efi/EFI/BOOT

    # Menu entries
    ${lib.concatStringsSep "\n\n" (map generateRefindEntry helpers.sortedEntries)}

    # Advanced features
    ${lib.optionalString cfg.features.memtest ''
      # Memory test tool
      menuentry "Memory Test" {
        loader /EFI/tools/memtest86.efi
        icon /EFI/refind/icons/tool_memtest.png
      }
    ''}

    ${lib.optionalString cfg.features.recovery ''
      # Recovery options
      menuentry "NixOS Recovery" {
        loader /EFI/nixos/kernel
        initrd /EFI/nixos/initrd
        options "init=/bin/sh"
        icon /EFI/refind/icons/os_nixos_rescue.png
      }
    ''}
  '';

  # Generate generations configuration
  generationsConfig = lib.optionalString cfg.features.generationsMenu.enable ''
    # NixOS Generations Configuration
    ${lib.concatStringsSep "\n" (
      lib.genList (i: ''
        menuentry "Generation ${toString i}" {
          loader /nix/var/nix/profiles/system-${toString i}-link/kernel
          initrd /nix/var/nix/profiles/system-${toString i}-link/initrd
          icon /EFI/refind/icons/os_nixos.png
          options "init=/nix/var/nix/profiles/system-${toString i}-link/init"
        }
      '') cfg.features.generationsMenu.maxEntries
    )}
  '';

in
lib.mkIf (cfg.primary.type == "rEFInd") {
  # Enable rEFInd
  boot.loader = {
    grub.enable = false;
    systemd-boot.enable = false;

    # rEFInd configuration
    efi = {
      canTouchEfiVariables = true;
      efiSysMountPoint = "/boot";
    };

    timeout = cfg.primary.timeout;
  };

  # Install rEFInd package
  environment.systemPackages =
    with pkgs;
    [
      refind
      efibootmgr
    ]
    ++ lib.optionals cfg.features.memtest [
      memtest86plus
    ];

  # rEFInd installation and configuration
  system.activationScripts.refindSetup = ''
    # Install rEFInd
    mkdir -p /boot/EFI/refind
    mkdir -p /boot/EFI/refind/themes
    mkdir -p /boot/EFI/refind/icons

    # Copy rEFInd binaries
    cp ${pkgs.refind}/share/refind/refind_x64.efi /boot/EFI/refind/
    cp ${pkgs.refind}/share/refind/drivers_x64/* /boot/EFI/refind/drivers_x64/

    # Install icons
    cp -r ${pkgs.refind}/share/refind/icons/* /boot/EFI/refind/icons/

    # Generate configuration
    cat > /boot/EFI/refind/refind.conf << 'EOF'
    ${refindConfig}
    EOF

    ${lib.optionalString (cfg.primary.theme != null) ''
      # Install theme
      THEME_PATH="${helpers.getThemePath "rEFInd" cfg.primary.theme}"
      if [ -d "$THEME_PATH" ]; then
        cp -r "$THEME_PATH" /boot/EFI/refind/themes/
      fi
    ''}

    ${lib.optionalString cfg.features.generationsMenu.enable ''
      # Generate generations configuration
      cat > /boot/EFI/refind/nixos-generations.conf << 'EOF'
      ${generationsConfig}
      EOF
    ''}

    # Register rEFInd as default boot loader
    efibootmgr -c -d /dev/disk/by-label/ESP -p 1 -L "rEFInd" -l "\EFI\refind\refind_x64.efi"
  '';

  # Kernel configuration for rEFInd
  boot.kernelParams = [
    "quiet"
    "splash"
  ];

  # rEFInd-specific filesystem support
  boot.supportedFilesystems = [
    "vfat"
    "ntfs"
    "ext4"
    "btrfs"
  ];

  # Assertions for rEFInd-specific requirements
  assertions = [
    {
      assertion = config.boot.loader.grub.enable == false;
      message = "Cannot use both rEFInd and GRUB simultaneously";
    }
    {
      assertion = config.boot.loader.systemd-boot.enable == false;
      message = "Cannot use both rEFInd and systemd-boot simultaneously";
    }
    {
      assertion = pkgs.stdenv.targetPlatform.efiArch or null != null;
      message = "rEFInd requires EFI system";
    }
  ];
}
